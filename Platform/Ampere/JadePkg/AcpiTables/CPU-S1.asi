/** @file

  Copyright (c) 2020, Ampere Computing LLC. All rights reserved.<BR>

  SPDX-License-Identifier: BSD-2-Clause-Patent

**/

Device(C128) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10000)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x000, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x004, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x008, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x00c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x010, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x014, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x050, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x054, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x058, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 128, 0xFD, 2}
  }) // Domain 128
}

Device(C129) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10001)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x080, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x084, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x088, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x08c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x090, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x094, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x0d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x0d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x0d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 1219, 0xFD, 2}
  }) // Domain 129
}

Device(C130) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10100)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x100, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x104, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x108, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x10c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x110, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x114, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x12c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x134, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x150, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x154, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x158, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 130, 0xFD, 2}
  }) // Domain 130
}

Device(C131) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10101)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x180, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x184, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x188, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x18c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x190, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x194, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 131, 0xFD, 2}
  }) // Domain 131
}

Device(C132) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10200)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x200, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x204, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x208, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x20c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x210, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x214, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x22c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x234, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x250, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x254, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x258, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 132, 0xFD, 2}
  }) // Domain 132
}

Device(C133) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10201)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x280, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x284, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x288, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x28c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x290, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x294, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 133, 0xFD, 2}
  }) // Domain 133
}

Device(C134) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10300)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x300, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x304, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x308, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x30c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x310, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x314, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x32c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x334, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x350, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x354, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x358, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 134, 0xFD, 2}
  }) // Domain 134
}

Device(C135) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10301)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x380, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x384, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x388, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x38c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x390, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x394, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 135, 0xFD, 2}
  }) // Domain 135
}

Device(C136) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10400)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x400, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x404, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x408, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x40c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x410, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x414, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x42c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x434, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x450, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x454, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x458, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 136, 0xFD, 2}
  }) // Domain 136
}

Device(C137) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10401)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x480, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x484, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x488, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x48c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x490, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x494, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x4ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x4b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x4d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x4d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x4d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 137, 0xFD, 2}
  }) // Domain 137
}

Device(C138) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10500)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x500, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x504, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x508, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x50c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x510, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x514, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x52c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x534, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x550, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x554, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x558, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 138, 0xFD, 2}
  }) // Domain 138
}

Device(C139) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10501)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x580, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x584, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x588, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x58c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x590, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x594, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x5ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x5b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x5d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x5d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x5d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 139, 0xFD, 2}
  }) // Domain 139
}

Device(C140) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10600)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x600, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x604, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x608, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x60c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x610, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x614, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x62c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x634, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x650, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x654, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x658, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 140, 0xFD, 2}
  }) // Domain 140
}

Device(C141) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10601)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x680, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x684, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x688, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x68c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x690, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x694, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x6ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x6b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x6d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x6d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x6d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 141, 0xFD, 2}
  }) // Domain 141
}

Device(C142) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10700)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x700, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x704, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x708, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x70c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x710, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x714, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x72c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x734, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x750, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x754, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x758, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 142, 0xFD, 2}
  }) // Domain 142
}

Device(C143) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10701)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x780, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x784, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x788, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x78c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x790, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x794, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x7ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x7b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x7d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x7d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x7d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 143, 0xFD, 2}
  }) // Domain 143
}

Device(C144) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10800)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x800, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x804, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x808, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x80c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x810, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x814, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x82c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x834, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x850, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x854, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x858, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 144, 0xFD, 2}
  }) // Domain 144
}

Device(C145) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10801)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x880, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x884, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x888, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x88c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x890, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x894, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x8ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x8b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x8d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x8d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x8d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 145, 0xFD, 2}
  }) // Domain 145
}

Device(C146) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10900)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x900, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x904, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x908, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x90c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x910, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x914, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x92c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x934, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x950, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x954, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x958, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 146, 0xFD, 2}
  }) // Domain 146
}

Device(C147) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10901)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x980, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x984, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x988, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x98c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x990, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x994, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x9ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x9b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x9d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x9d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x9d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 147, 0xFD, 2}
  }) // Domain 147
}

Device(C148) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10a00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xa2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xa34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 148, 0xFD, 2}
  }) // Domain 148
}

Device(C149) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10a01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xa94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xaac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xab4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xad0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xad4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xad8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 149, 0xFD, 2}
  }) // Domain 149
}

Device(C150) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10b00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xb2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xb34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 150, 0xFD, 2}
  }) // Domain 150
}

Device(C151) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10b01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xb94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xbac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xbb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xbd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xbd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xbd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 151, 0xFD, 2}
  }) // Domain 151
}

Device(C152) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10c00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xc2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xc34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 152, 0xFD, 2}
  }) // Domain 152
}

Device(C153) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10c01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xc94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xcac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xcb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xcd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xcd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xcd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 153, 0xFD, 2}
  }) // Domain 153
}

Device(C154) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10d00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xd2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xd34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 154, 0xFD, 2}
  }) // Domain 154
}

Device(C155) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10d01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xd94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xdac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xdb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xdd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xdd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xdd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 155, 0xFD, 2}
  }) // Domain 155
}

Device(C156) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10e00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xe2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xe34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 156, 0xFD, 2}
  }) // Domain 156
}

Device(C157) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10e01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xe94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xeac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xeb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xed0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xed4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xed8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 157, 0xFD, 2}
  }) // Domain 157
}

Device(C158) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10f00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xf2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xf34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 158, 0xFD, 2}
  }) // Domain 158
}

Device(C159) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x10f01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xf94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xfac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0xfb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xfd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xfd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0xfd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 159, 0xFD, 2}
  }) // Domain 159
}

Device(C160) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11000)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1000, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1004, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1008, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x100c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1010, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1014, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x102c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1034, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1050, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1054, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1058, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 160, 0xFD, 2}
  }) // Domain 160
}

Device(C161) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11001)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1080, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1084, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1088, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x108c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1090, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1094, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x10ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x10b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x10d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x10d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x10d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 161, 0xFD, 2}
  }) // Domain 161
}

Device(C162) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11100)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1100, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1104, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1108, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x110c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1110, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1114, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x112c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1134, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1150, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1154, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1158, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 162, 0xFD, 2}
  }) // Domain 162
}

Device(C163) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11101)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1180, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1184, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1188, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x118c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1190, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1194, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x11ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x11b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x11d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x11d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x11d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 163, 0xFD, 2}
  }) // Domain 163
}

Device(C164) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11200)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1200, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1204, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1208, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x120c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1210, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1214, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x122c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1234, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1250, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1254, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1258, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 164, 0xFD, 2}
  }) // Domain 164
}

Device(C165) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11201)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1280, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1284, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1288, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x128c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1290, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1294, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x12ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x12b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x12d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x12d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x12d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 165, 0xFD, 2}
  }) // Domain 165
}

Device(C166) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11300)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1300, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1304, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1308, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x130c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1310, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1314, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x132c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1334, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1350, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1354, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1358, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 166, 0xFD, 2}
  }) // Domain 166
}

Device(C167) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11301)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1380, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1384, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1388, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x138c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1390, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1394, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x13ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x13b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x13d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x13d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x13d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 167, 0xFD, 2}
  }) // Domain 167
}

Device(C168) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11400)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1400, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1404, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1408, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x140c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1410, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1414, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x142c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1434, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1450, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1454, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1458, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 168, 0xFD, 2}
  }) // Domain 168
}

Device(C169) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11401)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1480, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1484, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1488, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x148c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1490, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1494, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x14ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x14b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x14d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x14d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x14d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 169, 0xFD, 2}
  }) // Domain 169
}

Device(C170) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11500)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1500, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1504, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1508, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x150c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1510, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1514, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x152c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1534, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1550, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1554, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1558, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 170, 0xFD, 2}
  }) // Domain 170
}

Device(C171) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11501)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1580, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1584, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1588, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x158c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1590, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1594, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x15ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x15b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x15d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x15d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x15d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 171, 0xFD, 2}
  }) // Domain 171
}

Device(C172) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11600)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1600, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1604, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1608, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x160c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1610, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1614, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x162c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1634, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1650, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1654, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1658, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 172, 0xFD, 2}
  }) // Domain 172
}

Device(C173) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11601)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1680, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1684, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1688, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x168c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1690, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1694, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x16ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x16b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x16d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x16d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x16d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 173, 0xFD, 2}
  }) // Domain 173
}

Device(C174) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11700)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1700, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1704, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1708, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x170c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1710, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1714, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x172c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1734, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1750, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1754, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1758, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 174, 0xFD, 2}
  }) // Domain 174
}

Device(C175) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11701)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1780, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1784, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1788, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x178c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1790, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1794, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x17ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x17b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x17d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x17d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x17d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 175, 0xFD, 2}
  }) // Domain 175
}

Device(C176) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11800)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1800, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1804, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1808, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x180c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1810, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1814, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x182c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1834, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1850, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1854, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1858, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 176, 0xFD, 2}
  }) // Domain 176
}

Device(C177) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11801)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1880, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1884, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1888, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x188c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1890, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1894, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x18ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x18b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x18d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x18d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x18d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 177, 0xFD, 2}
  }) // Domain 177
}

Device(C178) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11900)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1900, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1904, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1908, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x190c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1910, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1914, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x192c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1934, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1950, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1954, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1958, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 178, 0xFD, 2}
  }) // Domain 178
}

Device(C179) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11901)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1980, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1984, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1988, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x198c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1990, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1994, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x19ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x19b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x19d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x19d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x19d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 179, 0xFD, 2}
  }) // Domain 179
}

Device(C180) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11a00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1a2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1a34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 180, 0xFD, 2}
  }) // Domain 180
}

Device(C181) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11a01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1a94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1aac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1ab4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1ad0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1ad4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1ad8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 181, 0xFD, 2}
  }) // Domain 181
}

Device(C182) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11b00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1b2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1b34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 182, 0xFD, 2}
  }) // Domain 182
}

Device(C183) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11b01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1b94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1bac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1bb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1bd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1bd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1bd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 183, 0xFD, 2}
  }) // Domain 183
}

Device(C184) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11c00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1c2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1c34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 184, 0xFD, 2}
  }) // Domain 184
}

Device(C185) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11c01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1c94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1cac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1cb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1cd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1cd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1cd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 185, 0xFD, 2}
  }) // Domain 185
}

Device(C186) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11d00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1d2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1d34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 186, 0xFD, 2}
  }) // Domain 186
}

Device(C187) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11d01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1d94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1dac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1db4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1dd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1dd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1dd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 187, 0xFD, 2}
  }) // Domain 187
}

Device(C188) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11e00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1e2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1e34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 188, 0xFD, 2}
  }) // Domain 188
}

Device(C189) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11e01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1e94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1eac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1eb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1ed0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1ed4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1ed8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 189, 0xFD, 2}
  }) // Domain 189
}

Device(C190) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11f00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1f2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1f34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 190, 0xFD, 2}
  }) // Domain 190
}

Device(C191) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x11f01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1f94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1fac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x1fb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1fd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1fd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x1fd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 191, 0xFD, 2}
  }) // Domain 191
}

Device(C192) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12000)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2000, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2004, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2008, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x200c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2010, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2014, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x202c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2034, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2050, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2054, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2058, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 192, 0xFD, 2}
  }) // Domain 192
}

Device(C193) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12001)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2080, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2084, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2088, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x208c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2090, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2094, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x20ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x20b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x20d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x20d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x20d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 193, 0xFD, 2}
  }) // Domain 193
}

Device(C194) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12100)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2100, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2104, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2108, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x210c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2110, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2114, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x212c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2134, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2150, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2154, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2158, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 194, 0xFD, 2}
  }) // Domain 194
}

Device(C195) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12101)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2180, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2184, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2188, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x218c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2190, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2194, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x21ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x21b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x21d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x21d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x21d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 195, 0xFD, 2}
  }) // Domain 195
}

Device(C196) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12200)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2200, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2204, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2208, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x220c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2210, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2214, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x222c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2234, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2250, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2254, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2258, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 196, 0xFD, 2}
  }) // Domain 196
}

Device(C197) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12201)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2280, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2284, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2288, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x228c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2290, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2294, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x22ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x22b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x22d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x22d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x22d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 197, 0xFD, 2}
  }) // Domain 197
}

Device(C198) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12300)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2300, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2304, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2308, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x230c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2310, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2314, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x232c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2334, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2350, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2354, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2358, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 198, 0xFD, 2}
  }) // Domain 198
}

Device(C199) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12301)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2380, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2384, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2388, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x238c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2390, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2394, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x23ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x23b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x23d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x23d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x23d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 199, 0xFD, 2}
  }) // Domain 199
}

Device(C200) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12400)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2400, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2404, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2408, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x240c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2410, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2414, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x242c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2434, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2450, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2454, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2458, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 200, 0xFD, 2}
  }) // Domain 200
}

Device(C201) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12401)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2480, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2484, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2488, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x248c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2490, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2494, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x24ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x24b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x24d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x24d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x24d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 201, 0xFD, 2}
  }) // Domain 201
}

Device(C202) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12500)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2500, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2504, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2508, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x250c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2510, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2514, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x252c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2534, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2550, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2554, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2558, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 202, 0xFD, 2}
  }) // Domain 202
}

Device(C203) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12501)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2580, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2584, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2588, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x258c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2590, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2594, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x25ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x25b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x25d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x25d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x25d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 203, 0xFD, 2}
  }) // Domain 203
}

Device(C204) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12600)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2600, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2604, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2608, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x260c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2610, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2614, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x262c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2634, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2650, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2654, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2658, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 204, 0xFD, 2}
  }) // Domain 204
}

Device(C205) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12601)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2680, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2684, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2688, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x268c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2690, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2694, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x26ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x26b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x26d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x26d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x26d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 205, 0xFD, 2}
  }) // Domain 205
}

Device(C206) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12700)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2700, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2704, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2708, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x270c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2710, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2714, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x272c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2734, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2750, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2754, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2758, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 206, 0xFD, 2}
  }) // Domain 206
}

Device(C207) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12701)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2780, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2784, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2788, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x278c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2790, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2794, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x27ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x27b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x27d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x27d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x27d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 207, 0xFD, 2}
  }) // Domain 207
}

Device(C208) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12800)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2800, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2804, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2808, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x280c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2810, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2814, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x282c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2834, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2850, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2854, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2858, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 208, 0xFD, 2}
  }) // Domain 208
}

Device(C209) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12801)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2880, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2884, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2888, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x288c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2890, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2894, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x28ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x28b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x28d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x28d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x28d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 209, 0xFD, 2}
  }) // Domain 209
}

Device(C210) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12900)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2900, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2904, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2908, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x290c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2910, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2914, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x292c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2934, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2950, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2954, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2958, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 210, 0xFD, 2}
  }) // Domain 210
}

Device(C211) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12901)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2980, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2984, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2988, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x298c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2990, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2994, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x29ac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x29b4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x29d0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x29d4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x29d8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 211, 0xFD, 2}
  }) // Domain 211
}

Device(C212) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12a00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2a2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2a34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 212, 0xFD, 2}
  }) // Domain 212
}

Device(C213) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12a01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2a94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2aac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2ab4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2ad0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2ad4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2ad8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 213, 0xFD, 2}
  }) // Domain 213
}

Device(C214) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12b00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2b2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2b34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 214, 0xFD, 2}
  }) // Domain 214
}

Device(C215) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12b01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2b94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2bac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2bb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2bd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2bd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2bd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 215, 0xFD, 2}
  }) // Domain 215
}

Device(C216) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12c00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2c2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2c34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 216, 0xFD, 2}
  }) // Domain 216
}

Device(C217) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12c01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2c94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2cac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2cb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2cd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2cd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2cd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 217, 0xFD, 2}
  }) // Domain 217
}

Device(C218) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12d00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2d2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2d34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 218, 0xFD, 2}
  }) // Domain 218
}

Device(C219) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12d01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2d94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2dac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2db4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2dd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2dd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2dd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 219, 0xFD, 2}
  }) // Domain 219
}

Device(C220) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12e00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2e2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2e34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 220, 0xFD, 2}
  }) // Domain 220
}

Device(C221) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12e01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2e94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2eac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2eb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2ed0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2ed4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2ed8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 221, 0xFD, 2}
  }) // Domain 221
}

Device(C222) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12f00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f00, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f04, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f08, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f0c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f10, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f14, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2f2c, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2f34, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f50, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f54, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f58, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 222, 0xFD, 2}
  }) // Domain 222
}

Device(C223) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x12f01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f80, 18)},         // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f84, 18)},         // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f88, 18)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f8c, 18)},         // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f90, 18)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2f94, 18)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2fac, 18)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x2fb4, 18)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2fd0, 18)},         // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2fd4, 18)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x2fd8, 18)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 223, 0xFD, 2}
  }) // Domain 223
}

Device(C224) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13000)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3000, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3004, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3008, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x300c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3010, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3014, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x302c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3034, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3050, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3054, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3058, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 224, 0xFD, 2}
  }) // Domain 224
}

Device(C225) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13001)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3080, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3084, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3088, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x308c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3090, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3094, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x30ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x30b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x30d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x30d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x30d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 225, 0xFD, 2}
  }) // Domain 225
}

Device(C226) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13100)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3100, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3104, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3108, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x310c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3110, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3114, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x312c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3134, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3150, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3154, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3158, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 226, 0xFD, 2}
  }) // Domain 226
}

Device(C227) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13101)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3180, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3184, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3188, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x318c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3190, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3194, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x31ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x31b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x31d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x31d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x31d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 227, 0xFD, 2}
  }) // Domain 227
}

Device(C228) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13200)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3200, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3204, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3208, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x320c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3210, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3214, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x322c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3234, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3250, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3254, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3258, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 228, 0xFD, 2}
  }) // Domain 228
}

Device(C229) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13201)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3280, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3284, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3288, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x328c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3290, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3294, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x32ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x32b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x32d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x32d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x32d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 229, 0xFD, 2}
  }) // Domain 229
}

Device(C230) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13300)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3300, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3304, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3308, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x330c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3310, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3314, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x332c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3334, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3350, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3354, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3358, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 230, 0xFD, 2}
  }) // Domain 230
}

Device(C231) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13301)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3380, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3384, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3388, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x338c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3390, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3394, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x33ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x33b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x33d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x33d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x33d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 231, 0xFD, 2}
  }) // Domain 231
}

Device(C232) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13400)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3400, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3404, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3408, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x340c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3410, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3414, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x342c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3434, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3450, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3454, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3458, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 232, 0xFD, 2}
  }) // Domain 232
}

Device(C233) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13401)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3480, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3484, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3488, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x348c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3490, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3494, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x34ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x34b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x34d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x34d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x34d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 233, 0xFD, 2}
  }) // Domain 233
}

Device(C234) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13500)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3500, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3504, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3508, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x350c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3510, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3514, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x352c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3534, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3550, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3554, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3558, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 234, 0xFD, 2}
  }) // Domain 234
}

Device(C235) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13501)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3580, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3584, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3588, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x358c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3590, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3594, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x35ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x35b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x35d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x35d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x35d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 235, 0xFD, 2}
  }) // Domain 235
}

Device(C236) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13600)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3600, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3604, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3608, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x360c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3610, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3614, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x362c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3634, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3650, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3654, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3658, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 236, 0xFD, 2}
  }) // Domain 236
}

Device(C237) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13601)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3680, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3684, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3688, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x368c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3690, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3694, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x36ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x36b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x36d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x36d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x36d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 237, 0xFD, 2}
  }) // Domain 237
}

Device(C238) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13700)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3700, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3704, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3708, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x370c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3710, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3714, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x372c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3734, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3750, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3754, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3758, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 238, 0xFD, 2}
  }) // Domain 238
}

Device(C239) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13701)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3780, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3784, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3788, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x378c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3790, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3794, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x37ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x37b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x37d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x37d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x37d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 239, 0xFD, 2}
  }) // Domain 239
}

Device(C240) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13800)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3800, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3804, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3808, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x380c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3810, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3814, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x382c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3834, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3850, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3854, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3858, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 240, 0xFD, 2}
  }) // Domain 240
}

Device(C241) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13801)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3880, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3884, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3888, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x388c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3890, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3894, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x38ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x38b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x38d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x38d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x38d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 241, 0xFD, 2}
  }) // Domain 241
}

Device(C242) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13900)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3900, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3904, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3908, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x390c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3910, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3914, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x392c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3934, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3950, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3954, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3958, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 242, 0xFD, 2}
  }) // Domain 242
}

Device(C243) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13901)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3980, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3984, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3988, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x398c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3990, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3994, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x39ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x39b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x39d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x39d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x39d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 243, 0xFD, 2}
  }) // Domain 243
}

Device(C244) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13a00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3a2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3a34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 244, 0xFD, 2}
  }) // Domain 244
}

Device(C245) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13a01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3a94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3aac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3ab4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3ad0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3ad4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3ad8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 245, 0xFD, 2}
  }) // Domain 245
}

Device(C246) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13b00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3b2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3b34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 246, 0xFD, 2}
  }) // Domain 246
}

Device(C247) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13b01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3b94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3bac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3bb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3bd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3bd4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3bd8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 247, 0xFD, 2}
  }) // Domain 247
}

Device(C248) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13c00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3c2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3c34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 248, 0xFD, 2}
  }) // Domain 248
}

Device(C249) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13c01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3c94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3cac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3cb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3cd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3cd4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3cd8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 249, 0xFD, 2}
  }) // Domain 249
}

Device(C250) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13d00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3d2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3d34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 250, 0xFD, 2}
  }) // Domain 250
}

Device(C251) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13d01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3d94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3dac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3db4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3dd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3dd4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3dd8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 251, 0xFD, 2}
  }) // Domain 251
}

Device(C252) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13e00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3e2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3e34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 252, 0xFD, 2}
  }) // Domain 252
}

Device(C253) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13e01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3e94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3eac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3eb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3ed0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3ed4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3ed8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 253, 0xFD, 2}
  }) // Domain 253
}

Device(C254) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13f00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3f2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3f34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 254, 0xFD, 2}
  }) // Domain 254
}

Device(C255) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x13f01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3f94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3fac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PlatformCommChannel, 64, 0, 0x3fb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3fd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3fd4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PlatformCommChannel, 32, 0, 0x3fd8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 255, 0xFD, 2}
  }) // Domain 255
}
